{
    "publisher": "als251",
    "repository": {
        "type": "git",
        "url": "https://github.com/RuleWorld/BNG_vscode_extension"
    },
    "icon": "assets/flagman.png",
    "galleryBanner": {
        "color": "#C80000",
        "theme": "dark"
    },
    "name": "bngl",
    "displayName": "BioNetGen Language",
    "description": "BNG language extension for vscode",
    "version": "0.7.1",
    "engines": {
        "vscode": "^1.52.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets",
        "Themes"
    ],
    "main": "./src/extension.js",
    "activationEvents": [
        "onCommand:bng.setup",
        "onCommand:bng.upgrade",
        "onLanguage:bngl"
    ],
    "contributes": {
        "languages": [
            {
                "id": "bngl",
                "aliases": [
                    "BioNetGen Language",
                    "bng"
                ],
                "extensions": [
                    ".bngl",
                    ".net",
                    ".gdat",
                    ".cdat",
                    ".scan",
                    ".graphml"
                ],
                "configuration": "./bngl-language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "bngl",
                "scopeName": "source.bngl",
                "path": "./syntaxes/bngl.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "bngl",
                "path": "./snippets/bngl-snippets.json"
            }
        ],
        "themes": [
            {
                "label": "dark-bngl",
                "uiTheme": "vs-dark",
                "path": "./themes/dark-bngl.json"
            }
        ],
        "commands": [
            {
                "command": "bng.run_bngl",
                "title": "Run BNG",
                "icon": {
                    "dark": "./assets/flagman.png",
                    "light": "./assets/flagman.png"
                }
            },
            {
                "command": "bng.plot_dat",
                "title": "CLI Plotting",
                "icon": {
                    "dark": "./assets/plot_icon_dark.svg",
                    "light": "./assets/plot_icon_light.svg"
                }
            },
            {
                "command": "bng.run_viz",
                "title": "Make model visualizations",
                "icon": {
                    "dark": "./assets/network.svg",
                    "light": "./assets/network.svg"
                }
            },
            {
                "command": "bng.webview",
                "title": "Built-in plotting",
                "icon": {
                    "dark": "./assets/for_plotly_dark.svg",
                    "light": "./assets/for_plotly_light.svg"
                }
            },
            {
                "command": "bng.setup",
                "title": "BNG setup"
            },
            {
                "command": "bng.upgrade",
                "title": "BNG upgrade"
            },
            {
                "command": "bng.process_cleanup",
                "title": "BNG process cleanup"
            },
            {
                "command": "bng.kill_process",
                "title": "Kill process"
            }
        ],
        "views": {
            "explorer": [
                {
                    "id": "processManagerTreeView",
                    "name": "BNG Process Manager",
                    "when": "bng.processManagerActive"
                }
            ]
        },
        "menus": {
            "editor/title": [
                {
                    "when": "resourceLangId == bngl && resourceExtname == .bngl",
                    "group": "navigation",
                    "title": "Run BNG",
                    "command": "bng.run_bngl"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .bngl",
                    "group": "navigation",
                    "title": "Run visualization",
                    "command": "bng.run_viz"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .gdat",
                    "group": "navigation",
                    "title": "Plot gdat",
                    "command": "bng.plot_dat"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .gdat",
                    "group": "navigation",
                    "title": "Plotly",
                    "command": "bng.webview"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .cdat",
                    "group": "navigation",
                    "title": "Plot cdat",
                    "command": "bng.plot_dat"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .cdat",
                    "group": "navigation",
                    "title": "Plotly",
                    "command": "bng.webview"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .scan",
                    "group": "navigation",
                    "title": "Plot scan",
                    "command": "bng.plot_dat"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .scan",
                    "group": "navigation",
                    "title": "Plotly",
                    "command": "bng.webview"
                },
                {
                    "when": "resourceLangId == bngl && resourceExtname == .graphml",
                    "group": "navigation",
                    "title": "GraphML View",
                    "command": "bng.webview"
                }
            ],
            "view/item/context": [
                {
                    "when": "view == processManagerTreeView",
                    "command": "bng.kill_process"
                }
            ],
            "commandPalette": [
                {
                    "command": "bng.kill_process",
                    "when": "false"
                },
                {
                    "command": "bng.process_cleanup",
                    "when": "bng.processManagerActive"
                }
            ]
        },
        "keybindings": [
            {
                "command": "bng.run_bngl",
                "key": "ctrl+shift+f1",
                "mac": "cmd+shift+f1",
                "when": "resourceLangId == bngl && resourceExtname == .bngl"
            },
            {
                "command": "bng.run_viz",
                "key": "ctrl+shift+f2",
                "mac": "cmd+shift+f2",
                "when": "resourceLangId == bngl && resourceExtname == .bngl"
            },
            {
                "command": "bng.plot_dat",
                "key": "ctrl+shift+f2",
                "mac": "cmd+shift+f2",
                "when": "resourceExtname == .gdat || resourceExtname == .cdat || resourceExtname == .scan"
            },
            {
                "command": "bng.webview",
                "key": "ctrl+shift+f1",
                "mac": "cmd+shift+f1",
                "when": "resourceExtname == .gdat || resourceExtname == .cdat || resourceExtname == .scan"
            }
        ],
        "extensionDependencies": [
            "ms-python.python"
        ],
        "scripts": {
            "lint": "eslint .",
            "compile": "tsc -p ./",
            "pretest": "npm run lint",
		    "test": "node ./out/test/runTest.js"
        },
        "configuration": {
            "title": "BioNetGen",
            "properties": {
                "bngl.general.auto_install": {
                    "markdownDescription": "Enable or disable automated install of PyBioNetGen.",
                    "type": "boolean",
                    "default": true
                },
                "bngl.general.enable_terminal_runner": {
                    "markdownDescription": "Enable old terminal runner for model running and visualization.",
                    "type": "boolean",
                    "default": false
                },
                "bngl.general.auto_open": {
                    "markdownDescription": "(WIP) Enable or disable automated opening of result files like gdat.",
                    "type": "boolean",
                    "default": true
                },
                "bngl.general.result_folder": {
                    "markdownDescription": "Set default folder for results in case a workspace is not open (use absolute path).",
                    "type": ["string","null"],
                    "default": null
                },
                "bngl.plotting.legend": {
                    "markdownDescription": "To plot the legend or not with built-in plotting",
                    "type": "boolean",
                    "default": true
                },
                "bngl.plotting.max_series_count": {
                    "markdownDescription": "The number of maximum time series to plot.",
                    "type": "number",
                    "default": 50,
                    "minimum": 1
                },
                "bngl.plotting.menus": {
                    "markdownDescription": "Enable or disable plotly menus",
                    "type": "boolean",
                    "default": true
                }
            }
        }
    }
}
